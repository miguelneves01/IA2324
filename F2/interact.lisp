(load (merge-pathnames "jogo.lisp" *compile-file-pathname*))
(load (merge-pathnames "algoritmo.lisp" *compile-file-pathname*))

(defun ler-operador (operadores-validos posicoes-validas)
    (format t "Escolha um operador:~%")
    (loop for i from 1 to (length operadores-validos) do
        (format t "~d. ~a~%" i (print-posicao (nth (- i 1) posicoes-validas)))
    )
    (nth (- (read) 1) operadores-validos)
)

(defun print-tabuleiro (tabuleiro)
    (format t "    A   B   C   D   E   F   G   H   I   J~%")
    (format t "1  ~a~%" (print-line (first tabuleiro)))
    (format t "2  ~a~%" (print-line (second tabuleiro)))    
    (format t "3  ~a~%" (print-line (third tabuleiro)))  
    (format t "4  ~a~%" (print-line (fourth tabuleiro)))    
    (format t "5  ~a~%" (print-line (fifth tabuleiro)))    
    (format t "6  ~a~%" (print-line (sixth tabuleiro)))    
    (format t "7  ~a~%" (print-line (seventh tabuleiro)))
    (format t "8  ~a~%" (print-line (eighth tabuleiro)))
    (format t "9  ~a~%" (print-line (ninth tabuleiro)))
    (format t "10 ~a~%" (print-line (tenth tabuleiro)))
)

(defun print-line (linha)
    (format nil "~3d ~3d ~3d ~3d ~3d ~3d ~3d ~3d ~3d ~3d" 
        (first linha)
        (second linha)
        (third linha)
        (fourth linha)
        (fifth linha)
        (sixth linha)
        (seventh linha)
        (eighth linha)
        (ninth linha)
        (tenth linha))
)

(defun print-posicao (posicao)
    (format nil "~a~d" (numero-letra (first posicao)) (+ (second posicao) 1))
)

(defun ler-gamemode ()
    (format t "Escolha o modo de jogo:~%1. Player vs Player~%2. Player vs AI~%3. AI vs AI~%")
    (case (read)
        (1 'player-only)
        (2 (ler-player-1))
        (3 'ai-ai)
    )
)

(defun ler-player-1 ()
    (format t "Quem comeca?~%1. AI~%2. Player~%")
    (case (read)
        (1 'ai-player)
        (2 'player-ai)
    )
)

(defun init ()
    (let ((resultado (funcall (ler-gamemode) (tabuleiro-aleatorio))))
        (format t "Resultados: P1- ~d : P2- ~d~%" (first resultado) (second resultado))
        (format t "Vencedor: Player ~d" (if (> (first resultado) (second resultado)) 1 2))
    )
)