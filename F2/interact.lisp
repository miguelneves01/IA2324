(load (merge-pathnames "jogo.lisp" *compile-file-pathname*))
(load (merge-pathnames "algoritmo.lisp" *compile-file-pathname*))

(defun ler-operador (operadores-validos)
  (format t "x. Operador-x (coluna linha))~%")
  (format t "1. Operador-1 (-1 2)~%")
  (format t "2. Operador-2 (1 2)~%")
  (format t "3. Operador-3 (2 1)~%")
  (format t "4. Operador-4 (2 -1)~%")
  (format t "5. Operador-5 (1 -2)~%")
  (format t "6. Operador-6 (-1 -2)~%")
  (format t "7. Operador-7 (-2 -1)~%")
  (format t "8. Operador-8 (-2 1)~%")
  (format t "Operador: ")
    (let ((operador (read)))
        (case operador
            (1 'operador-1)
            (2 'operador-2)
            (3 'operador-3)
            (4 'operador-4)
            (5 'operador-5)
            (6 'operador-6)
            (7 'operador-7)
            (8 'operador-8)
        )
    )
)

(defun print-tabuleiro (tabuleiro)
    (format t "   A  B  C  D  E  F  G  H  I  J~%")
    (format t "1  ~a~%" (print-line (first tabuleiro)))
    (format t "2  ~a~%" (print-line (second tabuleiro)))    
    (format t "3  ~a~%" (print-line (third tabuleiro)))  
    (format t "4  ~a~%" (print-line (fourth tabuleiro)))    
    (format t "5  ~a~%" (print-line (fifth tabuleiro)))    
    (format t "6  ~a~%" (print-line (sixth tabuleiro)))    
    (format t "7  ~a~%" (print-line (seventh tabuleiro)))
    (format t "8  ~a~%" (print-line (eighth tabuleiro)))
    (format t "9  ~a~%" (print-line (ninth tabuleiro)))
    (format t "10 ~a~%" (print-line (tenth tabuleiro)))
)

(defun print-line (linha)
    (format nil "~2,'0d ~2,'0d ~2,'0d ~2,'0d ~2,'0d ~2,'0d ~2,'0d ~2,'0d ~2,'0d ~2,'0d" 
        (first linha)
        (second linha)
        (third linha)
        (fourth linha)
        (fifth linha)
        (sixth linha)
        (seventh linha)
        (eighth linha)
        (ninth linha)
        (tenth linha))
)